services:
  db:
    image: postgres:15-alpine
    restart: always
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --timeout 0 # keine Verbindungstrennung durch Inaktivit√§t

  web:
    build:
      context: .
      dockerfile: dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      ENV: development
      REDIS_URL: redis://redis:6379
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_started

  rqworker:
    build:
      context: .
      dockerfile: Dockerfile
    command: python manage.py rqworker default low high --with-scheduler
    environment:
      ENV: development
      REDIS_URL: redis://redis:6379
    volumes:
      - .:/app
    env_file: .env
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_started

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

volumes:
  postgres_data:
